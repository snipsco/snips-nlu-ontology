version = "0.64.7"
group = "ai.snips"


apply plugin: 'kotlin'

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compile "net.java.dev.jna:jna:4.5.0"
    testCompile "junit:junit:4.12"
    testCompile "com.google.truth:truth:0.36"
}

def buildType = project.hasProperty("debug") ? "debug" : "release"
println "Using build type $buildType"

def rustTargetPath = project.hasProperty("rustTargetPath") ? project.rustTargetPath : "../../../target"
println "Using rust target path $rustTargetPath"

def soForJar = [
        ["$rustTargetPath/$buildType/libsnips_nlu_ontology_ffi.so", "linux-x86-64", "linuxNative" ],
        ["$rustTargetPath/$buildType/libsnips_nlu_ontology_ffi.dylib", "darwin", "macOsNative" ],
        ["$rustTargetPath/arm-unknown-linux-gnueabihf/$buildType/libsnips_nlu_ontology_ffi.so", "linux-arm", "linuxArmCross"]
]

def jarClassifier = {
    def existing = soForJar.findAll{ file(it[0]).exists() }
    if(existing.size == 1) existing[0][1]
    else if(existing.size == 0) "naked"
    else "multiarch"
}

jar {
    classifier "${ -> jarClassifier() }"
}

def jniLibsDir = new File(buildDir, "jniLibs")

soForJar.forEach {
    def taskName = "copySo${it[2].capitalize()}ForJar"
    def soFile = file(it[0])
    def destDir = new File(jniLibsDir, it[1])

    task(taskName, type: Copy) {
        from soFile
        into destDir
    }
    processResources.dependsOn(taskName)

}

sourceSets {
    main {
        resources {
            srcDir jniLibsDir
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

apply plugin: 'maven'

def _nexusUsername = project.hasProperty("nexusUsername") ? nexusUsername : ""
def _nexusPassword = project.hasProperty("nexusPassword") ? nexusPassword : ""

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://nexus-repository.snips.ai/repository/snips-maven-releases/") {
                authentication(userName: _nexusUsername, password: _nexusPassword)
            }
            snapshotRepository(url: "https://nexus-repository.snips.ai/repository/snips-maven-snapshots/") {
                authentication(userName: _nexusUsername, password: _nexusPassword)
            }
        }
    }
}

def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.whenConfigured { pom ->
    pom.dependencies.find { dep -> dep.groupId == 'net.java.dev.jna' && dep.artifactId == 'jna' }.scope = "provided"
}
